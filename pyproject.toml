#--------------------------------------------------
# 파일명: pyproject.toml
# 이 파일은 poetry에서 사용하는 설정 파일이다.
# - 프로젝트 이름, 버전 , 설명 
# - 포함할 파이썬 폴더 
# - 필요한 외부 패키지 목록
# - 개발용 도구는 무엇인지
# - 프로젝트 빌드 설정
# 등을 정의한다
#--------------------------------------------------

[tool.poetry]

name = "todo"                                   #프로젝트 이름이다. [폴더명과 무관함]
version = "0.1.0"                               # 프로젝트의 버전이다. (업데이트할 때 변경)
description = ""                                # 프로젝트에 대한 간단한 설명이다. 
authors = ["kwakyongjun <pacyfi007@gmail.com>"] # 만든 사람의 이메일
readme = "README.md"                            # 이 프로젝트의 소개 문서 파일 이름

# * 파이썬 코드가 들어 있는 폴더를 지정
# - 일반적으로 우리가 만든 Python 파일이 모여 있는 폴더명을 적는다
packages = [
    { include = "api" }, # * 'api' 폴더 안의 파일들을 패키지로 포함시킴
]

#-------------------------------------------------------
# [의존성 목록: 이 프로젝트에서 필요한 패키지들]
#-------------------------------------------------------
[tool.poetry.dependencies]

python = "^3.12" # * 이 프로젝트는 파이썬 3.12 이상 버전에서 작동하도록 설정

# * FastAPI: 웹 API 서버를 빠르게 만들 수 있게 해주는 프레임워크
fastapi = "^0.115.12"

uvicorn = { extras = ["standard"], version = "^0.34.0" }
# Uvicorn: #FastAPI 앱을 실행하는 웹 서버 
# extras 옵션은 로그 자동 재시작, 로깅, 보안 등 추가 기능도 포함됨

sqlalchemy = "^2.0.40"
# * SQLAlchemy: 파이썬 코드로 데이터베이스를 다루는 도구 (ORM)

asyncpg = "^0.30.0"
# * asyncpg: postgreSQL 데이터베이스에 비동기로 연결할 수 있게 해주는 드라이버

psycopg2-binary = "^2.9.10"
# * psycopg2-binary: PostgreSQL에 동기 방식으로 연결할 수 있는 드라이버
# - 비동기가 아닌 일반 DB 초기화 코드 등에서 사용됨

httpx = "^0.28.1"
# httpx: API 테스트 및 HTTP 요청 전송에 사용하는 도구 (비동기 지원)

#---------------------------------------------------
# 개발할 때만 사용하는 도구들 (베포에는 포함되지 않음)
#---------------------------------------------------
[tool.poetry.group.dev.dependencies]

pytest = "^8.3.1"
# pytest: 파이썬에서 테스트 코드를 실행할 수 있게 해주는 도구
# - 테스트 함수가 통과/실패 여부를 자동으로 판별해줌

pytest-asyncio = "^0.26.0"
# pytest-asyncio: async 함수 테스트에 필요한 도구
# 예: async def 로 만든 함수에서 awawit를 사용해 테스트 가능

aiosqlite = "^0.21.0"
# aiosqlite: SQLite를 비동기로 사용할 수 있게 해주는 드라이버
# 테스트용 DB 환경으로 자주 사용됨

httpx = "^0.28.1"
# httpx: HTTP 요청을 테스트할 수 있는 도구 (requests와 비슷함)
# 비동기 방식도 지원하며 FastAPI 테스트 코드에서 사용됨

# --------------------------------------------------
# Pytest 설정: 비동기 테스트의 이벤트 루프 범위를 명시적으로 설정
# --------------------------------------------------
[tool.pytest.ini_options]

asyncio_mode = "strict"
# asyncio_mode = "strict"
# - 비동기 테스트를 할 떄, 잘못된 await 사용 또는 누락을 더 잘 감지합니다.
# - 비동기 테스트에서 발생할 수 있는 실수를 줄여주는 안전한 모드입니다.

asyncio_default_fixture_loop_scope = "function"
# - 각 테스트 함수마다 새로운 이벤트 루프를 생성합니다.
# - 테스트 간의 지원 충돌을 방지하고, 향후 pytest-asyncio 변경에도 대비할 수 있습니다.


# --------------------------------------------------
# 프로젝트를 빌드(포장하거나 배포)할 떄 사용하는 설정
# --------------------------------------------------
[build-system]

requires = ["poetry-core"]                # * 빌드르 실행할 때 필요한 핵심 모듈
build-backend = "poetry.core.masonry.api" # 실제 빌드를 실행하는 백엔드 도구
